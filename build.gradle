// Top-level build file where you can add configuration options common to all sub-projects/modules.

/**
 * gradle脚本执行所需的依赖
 * 为gradle本身配置存储库和依赖关系
 */
buildscript {

    /**
     * 这里可以把项目所有的版本号存储在此位置
     * 方便统一管理
     */
    ext.versions =[

            //project config
            'minSdkVersion' : 14,
            'targetSdkVersion' : 28,
            'versionCode' : 1,
            'versionName' : 'versionName',
            'buildToolsVersion' : '26.0.2',
            'compileSdkVersion' : 28,

            //library
            'butterknife' : '8.8.1',
            'supportLibrary' : '27.1.0',
            'lifecycle' : '1.1.0',
            'room' : '1.0.0',
            'paging' : '1.0.0-alpha6',
            'retrofit' : '2.3.0',
            'okhttp' : '3.10.0',
            'okio' : '1.14.0',
            'rxjava' : '2.1.10',
            'rxandroid' : '2.0.2',
            'gson' : '2.8.2',
            'glide' : '4.6.1',

            //kotlin
            'kotlin' :'1.2.71',
            'dokka' : '0.9.16',
            'anko' : '0.10.1',
            'ktx' : '0.2',
            'dagger' : '2.16',

    ]
    /**
     * 声明使用的存储库
     * 就是gradle使用的远程库依赖
     * 也就是我们所使用的库托管在远端的哪个网站上
     * 也可以使用本地存储库或定义自己的远程存储库
     */
    repositories {
        jcenter()
        google()
        mavenCentral()
    }
    /**
     * 声明所使用的插件
     * 这里使用了gradle插件和butterknife插件
     * 为什么有的库需要添加plugin依赖，因为他们需要在编译时注入一些自己的代码
     * 比如dagger也需要使用plugin来帮助我们编译时将注解翻译成代码
     * dokka是kotlin的文档引擎
     */
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${versions.dokka}"
    }
}

/**
 * 配置项目中所有module（例如第三方插件或库）使用的存储库和依赖项
 * 如果你使用自己的远程存储库，你需要加上你的url
 */
allprojects {
    repositories {
        jcenter()
        google()
        mavenCentral()
        maven {
            url "https://jitpack.io"
        }
        maven {
            url 'https://oss.jfrog.org/libs-snapshot'
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
